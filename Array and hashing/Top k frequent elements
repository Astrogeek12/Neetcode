Given an integer array nums and an integer k, return the k most frequent elements. You may return the answer in any order.
Example 1:
Input: nums = [1,1,1,2,2,3], k = 2
Output: [1,2]
Example 2:
Input: nums = [1], k = 1
Output: [1]


The below is my logic where I did with two sets to keep track elements time complexity is O(n) 
but it's not efficient as it won't pass every test case and is not that good for larger inputs, 
so the most efficient way is to use the min-heap method...
Example:
nums =
[5,3,1,1,1,3,73,1]
k = 1
Output
[3]
It won't pass this test case my code will return 3 in this case but output should be 1 

CODE:
class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) {
        unordered_set<int> l;
        unordered_set<int> s;
        for(int i=0;i<nums.size();i++){
            if(l.find(nums[i])!=l.end()){
                s.insert(nums[i]);

            }
            l.insert(nums[i]);
        }
if(l.size()<=2){
s.insert(l.begin(),l.end());
}
        vector<int> result;
        for(int num:s){
            result.push_back(num);
            if(result.size()==k){
                break;
            }
        }
        return result;

        
    }
};

Another method with O(nlogn) using max heap , but there is also method which takes only O(n), We will see that now !!
Done using bucket sort (where we take the input array one as the count and other as the value) and hash map








Min-heap method:

